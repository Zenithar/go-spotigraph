// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: spotigraph/events/v1/event.proto

package eventsv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _event_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Event) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EventType

	// no validation rules for EventId

	// no validation rules for AggregateType

	// no validation rules for AggregateId

	if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Payload.(type) {

	case *Event_ChapterCreated:

		if v, ok := interface{}(m.GetChapterCreated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "ChapterCreated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_ChapterDeleted:

		if v, ok := interface{}(m.GetChapterDeleted()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "ChapterDeleted",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_ChapterLabelUpdated:

		if v, ok := interface{}(m.GetChapterLabelUpdated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "ChapterLabelUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_ChapterLeaderUpdated:

		if v, ok := interface{}(m.GetChapterLeaderUpdated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "ChapterLeaderUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on ChapterCreated with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ChapterCreated) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Urn

	// no validation rules for Label

	// no validation rules for LeaderId

	return nil
}

// ChapterCreatedValidationError is the validation error returned by
// ChapterCreated.Validate if the designated constraints aren't met.
type ChapterCreatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChapterCreatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChapterCreatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChapterCreatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChapterCreatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChapterCreatedValidationError) ErrorName() string { return "ChapterCreatedValidationError" }

// Error satisfies the builtin error interface
func (e ChapterCreatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChapterCreated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChapterCreatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChapterCreatedValidationError{}

// Validate checks the field values on ChapterDeleted with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ChapterDeleted) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Urn

	return nil
}

// ChapterDeletedValidationError is the validation error returned by
// ChapterDeleted.Validate if the designated constraints aren't met.
type ChapterDeletedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChapterDeletedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChapterDeletedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChapterDeletedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChapterDeletedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChapterDeletedValidationError) ErrorName() string { return "ChapterDeletedValidationError" }

// Error satisfies the builtin error interface
func (e ChapterDeletedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChapterDeleted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChapterDeletedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChapterDeletedValidationError{}

// Validate checks the field values on ChapterLabelUpdated with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ChapterLabelUpdated) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Urn

	// no validation rules for Old

	// no validation rules for New

	return nil
}

// ChapterLabelUpdatedValidationError is the validation error returned by
// ChapterLabelUpdated.Validate if the designated constraints aren't met.
type ChapterLabelUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChapterLabelUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChapterLabelUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChapterLabelUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChapterLabelUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChapterLabelUpdatedValidationError) ErrorName() string {
	return "ChapterLabelUpdatedValidationError"
}

// Error satisfies the builtin error interface
func (e ChapterLabelUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChapterLabelUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChapterLabelUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChapterLabelUpdatedValidationError{}

// Validate checks the field values on ChapterLeaderUpdated with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ChapterLeaderUpdated) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Urn

	// no validation rules for Old

	// no validation rules for New

	return nil
}

// ChapterLeaderUpdatedValidationError is the validation error returned by
// ChapterLeaderUpdated.Validate if the designated constraints aren't met.
type ChapterLeaderUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChapterLeaderUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChapterLeaderUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChapterLeaderUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChapterLeaderUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChapterLeaderUpdatedValidationError) ErrorName() string {
	return "ChapterLeaderUpdatedValidationError"
}

// Error satisfies the builtin error interface
func (e ChapterLeaderUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChapterLeaderUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChapterLeaderUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChapterLeaderUpdatedValidationError{}
