import (
    "go.opencensus.io/trace"

    chapterv1 "go.zenithar.org/spotigraph/api/gen/go/spotigraph/chapter/v1"
    personv1 "go.zenithar.org/spotigraph/api/gen/go/spotigraph/person/v1"
    guildv1 "go.zenithar.org/spotigraph/api/gen/go/spotigraph/guild/v1"
    squadv1 "go.zenithar.org/spotigraph/api/gen/go/spotigraph/squad/v1"
    tribev1 "go.zenithar.org/spotigraph/api/gen/go/spotigraph/tribe/v1"
    systemv1 "go.zenithar.org/spotigraph/api/gen/go/spotigraph/system/v1"
)

{{ $decorator := (or .Vars.DecoratorName (printf "%sWithOpenCensus" .Interface.Name)) }}

// {{$decorator}} implements {{.Interface.Type}} interface instrumented with opentracing spans
type {{$decorator}} struct {
  next      {{.Interface.Type}}
  instance  string
}

// New{{$decorator}} returns {{$decorator}}
func New{{$decorator}} (base {{.Interface.Type}}, instance string) {{.Interface.Type}} {
  d := {{$decorator}} {
    next:       base,
    instance:   instance,
  }

  return d
}

{{range $method := .Interface.Methods}}
  {{if $method.AcceptsContext}}
    // {{$method.Name}} implements {{$.Interface.Type}}
    func (d {{$decorator}}) {{$method.Declaration}} {
        ctx, span := trace.StartSpan(ctx, fmt.Sprintf("%s.{{$.Interface.Type}}.{{$method.Name}}", d.instance))
        defer span.End()

        res, err = d.next.{{ $method.Name }}(ctx, req)
        if err != nil {
		    span.SetStatus(trace.Status{Code: trace.StatusCodeInternal, Message: err.Error()})
	    }

        return res, err
    }
  {{end}}
{{end}}
